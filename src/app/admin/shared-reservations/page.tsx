'use client'

import { useState, useEffect } from 'react'
import { useRouter } from 'next/navigation'
import { Button } from '@/components/ui/button'
import { Card } from '@/components/ui/card'
import { Plus, Trash2, Users, Calendar } from 'lucide-react'
import { format } from 'date-fns'

interface SharedReservation {
  id: string
  name: string | null
  date: string
  startTime: string
  malesDurationHours: number
  femalesDurationHours: number
  genderOrder: 'MALES_FIRST' | 'FEMALES_FIRST'
  isAutoGenerated: boolean
  sauna: {
    id: string
    name: string
    island: {
      name: string
      club: {
        name: string
      }
    }
  }
  _count: {
    participants: number
  }
}

export default function SharedReservationsPage() {
  const router = useRouter()
  const [reservations, setReservations] = useState<SharedReservation[]>([])
  const [loading, setLoading] = useState(true)
  const [error, setError] = useState<string | null>(null)
  const [filter, setFilter] = useState<'all' | 'upcoming' | 'past'>('upcoming')

  useEffect(() => {
    fetchReservations()
  }, [])

  async function fetchReservations() {
    try {
      setLoading(true)
      const response = await fetch('/api/shared-reservations')
      if (!response.ok) throw new Error('Failed to fetch shared reservations')
      const result = await response.json()
      const data = result.data || result
      setReservations(data)
    } catch (err) {
      setError(err instanceof Error ? err.message : 'Unknown error')
    } finally {
      setLoading(false)
    }
  }

  async function handleDelete(id: string, name: string | null) {
    const displayName = name || 'this shared reservation'
    if (!confirm(`Are you sure you want to delete "${displayName}"? This will remove all participant registrations.`)) {
      return
    }

    try {
      const response = await fetch(`/api/shared-reservations/${id}`, {
        method: 'DELETE',
      })

      if (!response.ok) throw new Error('Failed to delete shared reservation')

      await fetchReservations()
    } catch (err) {
      alert(err instanceof Error ? err.message : 'Failed to delete shared reservation')
    }
  }

  function formatGenderSchedule(reservation: SharedReservation): string {
    const startHour = parseInt(reservation.startTime.split(':')[0])

    if (reservation.genderOrder === 'MALES_FIRST') {
      const malesEnd = startHour + reservation.malesDurationHours
      const femalesEnd = malesEnd + reservation.femalesDurationHours
      return `Men ${startHour}:00-${malesEnd}:00, Women ${malesEnd}:00-${femalesEnd}:00`
    } else {
      const femalesEnd = startHour + reservation.femalesDurationHours
      const malesEnd = femalesEnd + reservation.malesDurationHours
      return `Women ${startHour}:00-${femalesEnd}:00, Men ${femalesEnd}:00-${malesEnd}:00`
    }
  }

  const filteredReservations = reservations.filter(r => {
    const resDate = new Date(r.date)
    const today = new Date()
    today.setHours(0, 0, 0, 0)

    if (filter === 'upcoming') return resDate >= today
    if (filter === 'past') return resDate < today
    return true
  })

  if (loading) {
    return (
      <div className="flex items-center justify-center min-h-screen">
        <p className="text-gray-500">Loading shared reservations...</p>
      </div>
    )
  }

  if (error) {
    return (
      <div className="flex items-center justify-center min-h-screen">
        <div className="text-center">
          <p className="text-red-600 mb-4">Error: {error}</p>
          <Button onClick={() => fetchReservations()}>Retry</Button>
        </div>
      </div>
    )
  }

  return (
    <div className="container mx-auto py-8 px-4">
      <div className="flex justify-between items-center mb-8">
        <div>
          <h1 className="text-3xl font-bold">Shared Reservations</h1>
          <p className="text-gray-600 mt-2">
            Manage shared sauna events and Club Sauna reservations
          </p>
        </div>
        <Button onClick={() => router.push('/admin/shared-reservations/new')}>
          <Plus className="w-4 h-4 mr-2" />
          Create Shared Reservation
        </Button>
      </div>

      {/* Filter tabs */}
      <div className="flex gap-2 mb-6">
        <Button
          variant={filter === 'upcoming' ? 'default' : 'outline'}
          onClick={() => setFilter('upcoming')}
        >
          Upcoming
        </Button>
        <Button
          variant={filter === 'past' ? 'default' : 'outline'}
          onClick={() => setFilter('past')}
        >
          Past
        </Button>
        <Button
          variant={filter === 'all' ? 'default' : 'outline'}
          onClick={() => setFilter('all')}
        >
          All
        </Button>
      </div>

      {reservations.length === 0 ? (
        <Card className="p-12 text-center">
          <Users className="w-12 h-12 text-gray-400 mx-auto mb-4" />
          <h3 className="text-lg font-medium text-gray-900 mb-2">No shared reservations yet</h3>
          <p className="text-gray-600 mb-6">
            Create shared sauna events for multiple boats to participate
          </p>
          <Button onClick={() => router.push('/admin/shared-reservations/new')}>
            <Plus className="w-4 h-4 mr-2" />
            Create Shared Reservation
          </Button>
        </Card>
      ) : filteredReservations.length === 0 ? (
        <Card className="p-12 text-center">
          <Calendar className="w-12 h-12 text-gray-400 mx-auto mb-4" />
          <h3 className="text-lg font-medium text-gray-900 mb-2">No {filter} reservations</h3>
          <p className="text-gray-600">
            Try selecting a different filter
          </p>
        </Card>
      ) : (
        <div className="space-y-4">
          {filteredReservations.map((reservation) => (
            <Card key={reservation.id} className="p-6">
              <div className="flex justify-between items-start">
                <div className="flex-1">
                  <div className="flex items-center gap-2 mb-2">
                    <h3 className="text-lg font-semibold">
                      {reservation.name || 'Shared Sauna'}
                    </h3>
                    {reservation.isAutoGenerated && (
                      <span className="px-2 py-1 bg-purple-100 text-purple-700 text-xs rounded-full">
                        Auto-generated
                      </span>
                    )}
                  </div>

                  <div className="space-y-1 text-sm text-gray-600">
                    <p>
                      <strong>Sauna:</strong> {reservation.sauna.name} ({reservation.sauna.island.name})
                    </p>
                    <p>
                      <strong>Club:</strong> {reservation.sauna.island.club.name}
                    </p>
                    <p>
                      <strong>Date:</strong> {format(new Date(reservation.date), 'PPP')}
                    </p>
                    <p>
                      <strong>Schedule:</strong> {formatGenderSchedule(reservation)}
                    </p>
                    <p className="flex items-center">
                      <Users className="w-4 h-4 mr-1" />
                      <strong>{reservation._count.participants}</strong> {reservation._count.participants === 1 ? 'participant' : 'participants'}
                    </p>
                  </div>
                </div>

                <Button
                  variant="outline"
                  size="sm"
                  onClick={() => handleDelete(reservation.id, reservation.name)}
                >
                  <Trash2 className="w-4 h-4" />
                </Button>
              </div>
            </Card>
          ))}
        </div>
      )}
    </div>
  )
}
