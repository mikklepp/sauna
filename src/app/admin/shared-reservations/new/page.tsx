'use client';

import { useState, useEffect } from 'react';
import { useRouter } from 'next/navigation';
import { Button } from '@/components/ui/button';
import { Card } from '@/components/ui/card';
import { Input } from '@/components/ui/input';
import { Label } from '@/components/ui/label';
import { ArrowLeft } from 'lucide-react';

interface Sauna {
  id: string;
  name: string;
  island: {
    name: string;
    club: {
      name: string;
    };
  };
}

export default function NewSharedReservationPage() {
  const router = useRouter();
  const [saunas, setSaunas] = useState<Sauna[]>([]);
  const [loading, setLoading] = useState(false);
  const [formData, setFormData] = useState({
    saunaId: '',
    date: '',
    startTime: '21:00',
    malesDurationHours: 1,
    femalesDurationHours: 1,
    genderOrder: 'FEMALES_FIRST' as 'MALES_FIRST' | 'FEMALES_FIRST',
    name: '',
    description: '',
  });

  useEffect(() => {
    fetchSaunas();
  }, []);

  async function fetchSaunas() {
    try {
      const response = await fetch('/api/saunas');
      if (!response.ok) throw new Error('Failed to fetch saunas');
      const result = await response.json();
      const data = result.data || result;
      setSaunas(data);
      if (data.length > 0) {
        setFormData((prev) => ({ ...prev, saunaId: data[0].id }));
      }
    } catch (err) {
      alert(err instanceof Error ? err.message : 'Failed to load saunas');
    }
  }

  async function handleSubmit(e: React.FormEvent) {
    e.preventDefault();

    if (!formData.saunaId) {
      alert('Please select a sauna');
      return;
    }

    if (!formData.date) {
      alert('Please select a date');
      return;
    }

    // Validate date is in the future
    const selectedDate = new Date(formData.date);
    const today = new Date();
    today.setHours(0, 0, 0, 0);

    if (selectedDate < today) {
      alert('Please select a future date');
      return;
    }

    setLoading(true);

    try {
      const payload = {
        ...formData,
        name: formData.name.trim() || null,
        description: formData.description.trim() || null,
        isAutoGenerated: false,
        createdBy: 'admin', // In a real app, get from auth context
      };

      const response = await fetch('/api/shared-reservations', {
        method: 'POST',
        headers: { 'Content-Type': 'application/json' },
        body: JSON.stringify(payload),
      });

      if (!response.ok) {
        const error = await response.json();
        throw new Error(error.error || 'Failed to create shared reservation');
      }

      router.push('/admin/shared-reservations');
    } catch (err) {
      alert(
        err instanceof Error
          ? err.message
          : 'Failed to create shared reservation'
      );
      setLoading(false);
    }
  }

  // Calculate end time based on durations
  const startHour = parseInt(formData.startTime.split(':')[0]);
  const totalDuration =
    formData.malesDurationHours + formData.femalesDurationHours;
  const endTime = `${(startHour + totalDuration).toString().padStart(2, '0')}:00`;

  return (
    <div className="container mx-auto max-w-2xl px-4 py-8">
      <Button variant="outline" onClick={() => router.back()} className="mb-6">
        <ArrowLeft className="mr-2 h-4 w-4" />
        Back
      </Button>

      <Card className="p-6">
        <h1 className="mb-6 text-2xl font-bold">Create Shared Reservation</h1>

        <form onSubmit={handleSubmit} className="space-y-6">
          <div>
            <Label htmlFor="saunaId">Sauna *</Label>
            <select
              id="saunaId"
              value={formData.saunaId}
              onChange={(e) =>
                setFormData({ ...formData, saunaId: e.target.value })
              }
              className="w-full rounded-md border border-gray-300 px-3 py-2 focus:outline-none focus:ring-2 focus:ring-blue-500"
              required
            >
              <option value="">Select a sauna</option>
              {saunas.map((sauna) => (
                <option key={sauna.id} value={sauna.id}>
                  {sauna.name} - {sauna.island.name} ({sauna.island.club.name})
                </option>
              ))}
            </select>
            {saunas.length === 0 && (
              <p className="mt-2 text-sm text-amber-600">
                No saunas available. Please create a sauna first.
              </p>
            )}
          </div>

          <div>
            <Label htmlFor="date">Date *</Label>
            <Input
              type="date"
              id="date"
              value={formData.date}
              onChange={(e) =>
                setFormData({ ...formData, date: e.target.value })
              }
              min={new Date().toISOString().split('T')[0]}
              required
            />
          </div>

          <div>
            <Label htmlFor="startTime">Start Time *</Label>
            <select
              id="startTime"
              value={formData.startTime}
              onChange={(e) =>
                setFormData({ ...formData, startTime: e.target.value })
              }
              className="w-full rounded-md border border-gray-300 px-3 py-2 focus:outline-none focus:ring-2 focus:ring-blue-500"
              required
            >
              {Array.from({ length: 24 }, (_, i) => {
                const hour = i.toString().padStart(2, '0');
                return (
                  <option key={hour} value={`${hour}:00`}>
                    {hour}:00
                  </option>
                );
              })}
            </select>
          </div>

          <div>
            <Label htmlFor="genderOrder">Gender Order *</Label>
            <select
              id="genderOrder"
              value={formData.genderOrder}
              onChange={(e) =>
                setFormData({
                  ...formData,
                  genderOrder: e.target.value as
                    | 'MALES_FIRST'
                    | 'FEMALES_FIRST',
                })
              }
              className="w-full rounded-md border border-gray-300 px-3 py-2 focus:outline-none focus:ring-2 focus:ring-blue-500"
              required
            >
              <option value="FEMALES_FIRST">Women First, Men Second</option>
              <option value="MALES_FIRST">Men First, Women Second</option>
            </select>
          </div>

          <div className="grid grid-cols-2 gap-4">
            <div>
              <Label htmlFor="femalesDurationHours">
                Women Duration (hours) *
              </Label>
              <select
                id="femalesDurationHours"
                value={formData.femalesDurationHours}
                onChange={(e) =>
                  setFormData({
                    ...formData,
                    femalesDurationHours: parseInt(e.target.value),
                  })
                }
                className="w-full rounded-md border border-gray-300 px-3 py-2 focus:outline-none focus:ring-2 focus:ring-blue-500"
                required
              >
                {[1, 2, 3, 4].map((h) => (
                  <option key={h} value={h}>
                    {h} {h === 1 ? 'hour' : 'hours'}
                  </option>
                ))}
              </select>
            </div>

            <div>
              <Label htmlFor="malesDurationHours">Men Duration (hours) *</Label>
              <select
                id="malesDurationHours"
                value={formData.malesDurationHours}
                onChange={(e) =>
                  setFormData({
                    ...formData,
                    malesDurationHours: parseInt(e.target.value),
                  })
                }
                className="w-full rounded-md border border-gray-300 px-3 py-2 focus:outline-none focus:ring-2 focus:ring-blue-500"
                required
              >
                {[1, 2, 3, 4].map((h) => (
                  <option key={h} value={h}>
                    {h} {h === 1 ? 'hour' : 'hours'}
                  </option>
                ))}
              </select>
            </div>
          </div>

          {/* Schedule Preview */}
          <div className="rounded-lg border border-purple-200 bg-purple-50 p-4">
            <h3 className="mb-2 font-semibold text-purple-900">
              Schedule Preview
            </h3>
            <p className="text-sm text-purple-800">
              {formData.genderOrder === 'FEMALES_FIRST' ? (
                <>
                  Women: {formData.startTime} -{' '}
                  {(startHour + formData.femalesDurationHours)
                    .toString()
                    .padStart(2, '0')}
                  :00
                  <br />
                  Men:{' '}
                  {(startHour + formData.femalesDurationHours)
                    .toString()
                    .padStart(2, '0')}
                  :00 - {endTime}
                </>
              ) : (
                <>
                  Men: {formData.startTime} -{' '}
                  {(startHour + formData.malesDurationHours)
                    .toString()
                    .padStart(2, '0')}
                  :00
                  <br />
                  Women:{' '}
                  {(startHour + formData.malesDurationHours)
                    .toString()
                    .padStart(2, '0')}
                  :00 - {endTime}
                </>
              )}
            </p>
          </div>

          <div>
            <Label htmlFor="name">Event Name (Optional)</Label>
            <Input
              id="name"
              value={formData.name}
              onChange={(e) =>
                setFormData({ ...formData, name: e.target.value })
              }
              placeholder="e.g., Weekend Social Sauna, Ladies Night"
            />
          </div>

          <div>
            <Label htmlFor="description">Description (Optional)</Label>
            <textarea
              id="description"
              value={formData.description}
              onChange={(e) =>
                setFormData({ ...formData, description: e.target.value })
              }
              placeholder="Add any additional details about this shared sauna event"
              rows={3}
              className="w-full rounded-md border border-gray-300 px-3 py-2 focus:outline-none focus:ring-2 focus:ring-blue-500"
            />
          </div>

          <div className="flex gap-3 pt-4">
            <Button
              type="button"
              variant="outline"
              onClick={() => router.back()}
              disabled={loading}
              className="flex-1"
            >
              Cancel
            </Button>
            <Button
              type="submit"
              disabled={loading || saunas.length === 0}
              className="flex-1"
            >
              {loading ? 'Creating...' : 'Create Shared Reservation'}
            </Button>
          </div>
        </form>
      </Card>
    </div>
  );
}
