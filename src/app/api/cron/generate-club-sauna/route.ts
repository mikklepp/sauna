import { NextRequest } from 'next/server';
import { validateCronSecret } from '@/lib/auth';
import {
  successResponse,
  errorResponse,
  handleApiError,
  getAuthHeader,
} from '@/lib/api-utils';
import {
  generateClubSaunaData,
  isClubSaunaEligibleDate,
} from '@/lib/club-sauna';
import prisma from '@/lib/db';
import { addDays, startOfDay } from 'date-fns';

/**
 * POST /api/cron/generate-club-sauna
 * Generate Club Sauna shared reservations for eligible saunas
 * Runs daily at midnight (00:00)
 */
export async function POST(request: NextRequest) {
  try {
    // Validate cron secret
    const authHeader = getAuthHeader(request);
    const secret = authHeader?.replace('Bearer ', '');

    if (!validateCronSecret(secret || '')) {
      return errorResponse('Unauthorized', 401);
    }

    // Get tomorrow's date (cron runs at midnight, so we generate for the next day)
    const tomorrow = addDays(startOfDay(new Date()), 1);

    // Check if tomorrow is eligible for Club Sauna
    const eligibility = isClubSaunaEligibleDate(tomorrow);

    if (!eligibility.eligible) {
      return successResponse({
        message: 'Date is not eligible for Club Sauna',
        date: tomorrow.toISOString(),
        generated: [],
      });
    }

    // Get all saunas with auto Club Sauna enabled
    const eligibleSaunas = await prisma.sauna.findMany({
      where: {
        autoClubSaunaEnabled: true,
      },
      include: {
        island: {
          include: {
            club: true,
          },
        },
      },
    });

    const generated = [];

    for (const sauna of eligibleSaunas) {
      // Check if Club Sauna already exists for this date
      const existing = await prisma.sharedReservation.findFirst({
        where: {
          saunaId: sauna.id,
          date: startOfDay(tomorrow),
          isAutoGenerated: true,
          name: 'Club Sauna',
        },
      });

      if (existing) {
        // eslint-disable-next-line no-console
        console.log(
          `Club Sauna already exists for sauna ${sauna.name} on ${tomorrow.toISOString()}`
        );
        continue;
      }

      // Generate Club Sauna data
      const clubSaunaData = generateClubSaunaData(sauna, tomorrow);

      if (!clubSaunaData) {
        continue;
      }

      // Create shared reservation
      const sharedReservation = await prisma.sharedReservation.create({
        data: {
          saunaId: clubSaunaData.saunaId,
          date: clubSaunaData.date,
          startTime: clubSaunaData.startTime,
          malesDurationHours: clubSaunaData.malesDurationHours,
          femalesDurationHours: clubSaunaData.femalesDurationHours,
          genderOrder: clubSaunaData.genderOrder,
          name: clubSaunaData.name,
          isAutoGenerated: true,
          createdBy: 'system',
        },
      });

      generated.push({
        sharedReservationId: sharedReservation.id,
        saunaId: sauna.id,
        saunaName: sauna.name,
        islandName: sauna.island.name,
        clubName: sauna.island.club.name,
        date: tomorrow.toISOString(),
      });

      // eslint-disable-next-line no-console
      console.log(
        `Generated Club Sauna for ${sauna.name} on ${tomorrow.toISOString()}`
      );
    }

    return successResponse({
      message: 'Club Sauna generation completed',
      date: tomorrow.toISOString(),
      season: eligibility.season,
      generated,
    });
  } catch (error) {
    return handleApiError(error);
  }
}

/**
 * GET /api/cron/generate-club-sauna
 * Health check endpoint
 */
export async function GET() {
  return successResponse({
    message: 'Club Sauna generation endpoint is active',
    schedule: 'Runs daily at 00:00 UTC',
  });
}
