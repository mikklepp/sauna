import { NextRequest } from 'next/server';
import { validateCronSecret } from '@/lib/auth';
import { successResponse, errorResponse, handleApiError, getAuthHeader } from '@/lib/api-utils';
import { evaluateClubSauna } from '@/lib/club-sauna';
import prisma from '@/lib/db';
import { startOfDay, endOfDay } from 'date-fns';

/**
 * POST /api/cron/evaluate-club-sauna
 * Evaluate Club Sauna shared reservations and convert if < 3 boats
 * Runs daily at 20:00 (8:00 PM)
 */
export async function POST(request: NextRequest) {
  try {
    // Validate cron secret
    const authHeader = getAuthHeader(request);
    const secret = authHeader?.replace('Bearer ', '');
    
    if (!validateCronSecret(secret || '')) {
      return errorResponse('Unauthorized', 401);
    }
    
    // Get today's date
    const today = new Date();
    const todayStart = startOfDay(today);
    const todayEnd = endOfDay(today);
    
    // Find all auto-generated Club Sauna reservations for today
    const clubSaunas = await prisma.sharedReservation.findMany({
      where: {
        isAutoGenerated: true,
        name: 'Club Sauna',
        date: {
          gte: todayStart,
          lte: todayEnd,
        },
        autoCancelledAt: null, // Not already cancelled
      },
      include: {
        sauna: {
          include: {
            island: {
              include: {
                club: true,
              },
            },
          },
        },
        participants: {
          include: {
            boat: true,
          },
        },
      },
    });
    
    const evaluated = [];
    
    for (const clubSauna of clubSaunas) {
      // Evaluate the Club Sauna
      const evaluation = evaluateClubSauna(clubSauna);
      
      if (evaluation.shouldCancel) {
        // Cancel the shared reservation
        await prisma.sharedReservation.update({
          where: { id: clubSauna.id },
          data: {
            autoCancelledAt: new Date(),
            convertedToIndividual: true,
          },
        });
        
        // Create individual reservations for participants
        for (const conversion of evaluation.conversions) {
          const participant = clubSauna.participants.find(
            p => p.boatId === conversion.boatId
          );
          
          if (participant) {
            await prisma.reservation.create({
              data: {
                saunaId: clubSauna.saunaId,
                boatId: conversion.boatId,
                startTime: conversion.startTime,
                endTime: conversion.endTime,
                adults: participant.adults,
                kids: participant.kids,
                status: 'ACTIVE',
              },
            });
          }
        }
        
        evaluated.push({
          sharedReservationId: clubSauna.id,
          saunaName: clubSauna.sauna.name,
          islandName: clubSauna.sauna.island.name,
          clubName: clubSauna.sauna.island.club.name,
          participantCount: evaluation.participantCount,
          action: 'cancelled_and_converted',
          conversions: evaluation.conversions.length,
        });
        
        console.log(
          `Club Sauna ${clubSauna.id} cancelled (${evaluation.participantCount} participants < 3), ` +
          `converted ${evaluation.conversions.length} to individual reservations`
        );
      } else {
        evaluated.push({
          sharedReservationId: clubSauna.id,
          saunaName: clubSauna.sauna.name,
          islandName: clubSauna.sauna.island.name,
          clubName: clubSauna.sauna.island.club.name,
          participantCount: evaluation.participantCount,
          action: 'proceeding',
        });
        
        console.log(
          `Club Sauna ${clubSauna.id} proceeding (${evaluation.participantCount} participants >= 3)`
        );
      }
    }
    
    return successResponse({
      message: 'Club Sauna evaluation completed',
      date: today.toISOString(),
      evaluated,
    });
  } catch (error) {
    return handleApiError(error);
  }
}

/**
 * GET /api/cron/evaluate-club-sauna
 * Health check endpoint
 */
export async function GET() {
  return successResponse({
    message: 'Club Sauna evaluation endpoint is active',
    schedule: 'Runs daily at 20:00 UTC',
  });
}