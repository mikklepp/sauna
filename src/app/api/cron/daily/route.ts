import { NextRequest } from 'next/server';
import { validateCronSecret } from '@/lib/auth';
import {
  successResponse,
  errorResponse,
  handleApiError,
  getAuthHeader,
} from '@/lib/api-utils';
import {
  evaluateClubSauna,
  generateClubSaunaData,
  isClubSaunaEligibleDate,
} from '@/lib/club-sauna';
import { renewClubSecrets } from '@/lib/secret-renewal';
import prisma from '@/lib/db';
import { addDays, startOfDay, endOfDay } from 'date-fns';

/**
 * POST /api/cron/daily
 * Daily cron job that runs at 20:00 (8:00 PM) UTC
 *
 * Performs three operations:
 * 1. Evaluate today's Club Sauna reservations (cancel if < 3 participants)
 * 2. Generate tomorrow's Club Sauna reservations
 * 3. Check and renew club secrets expiring within 30 days
 */
export async function POST(request: NextRequest) {
  try {
    // Validate cron secret
    const authHeader = getAuthHeader(request);
    const secret = authHeader?.replace('Bearer ', '');

    if (!validateCronSecret(secret || '')) {
      return errorResponse('Unauthorized', 401);
    }

    const results = {
      timestamp: new Date().toISOString(),
      clubSaunaEvaluation: {
        evaluated: [] as any[],
      },
      clubSaunaGeneration: {
        generated: [] as any[],
        season: null as string | null | undefined,
      },
      secretRenewal: {
        renewed: [] as any[],
      },
    };

    // ========================================================================
    // STEP 1: Evaluate Today's Club Sauna Reservations
    // ========================================================================
    console.log("üìã Step 1: Evaluating today's Club Sauna reservations...");

    const today = new Date();
    const todayStart = startOfDay(today);
    const todayEnd = endOfDay(today);

    // Find all auto-generated Club Sauna reservations for today
    const clubSaunas = await prisma.sharedReservation.findMany({
      where: {
        isAutoGenerated: true,
        name: 'Club Sauna',
        date: {
          gte: todayStart,
          lte: todayEnd,
        },
        autoCancelledAt: null, // Not already cancelled
      },
      include: {
        sauna: {
          include: {
            island: {
              include: {
                club: true,
              },
            },
          },
        },
        participants: {
          include: {
            boat: true,
          },
        },
      },
    });

    for (const clubSauna of clubSaunas) {
      // Evaluate the Club Sauna
      const evaluation = evaluateClubSauna(clubSauna);

      if (evaluation.shouldCancel) {
        // Cancel the shared reservation
        await prisma.sharedReservation.update({
          where: { id: clubSauna.id },
          data: {
            autoCancelledAt: new Date(),
            convertedToIndividual: true,
          },
        });

        // Create individual reservations for participants
        for (const conversion of evaluation.conversions) {
          const participant = clubSauna.participants.find(
            (p) => p.boatId === conversion.boatId
          );

          if (participant) {
            await prisma.reservation.create({
              data: {
                saunaId: clubSauna.saunaId,
                boatId: conversion.boatId,
                startTime: conversion.startTime,
                endTime: conversion.endTime,
                adults: participant.adults,
                kids: participant.kids,
                status: 'ACTIVE',
              },
            });
          }
        }

        results.clubSaunaEvaluation.evaluated.push({
          sharedReservationId: clubSauna.id,
          saunaName: clubSauna.sauna.name,
          islandName: clubSauna.sauna.island.name,
          clubName: clubSauna.sauna.island.club.name,
          participantCount: evaluation.participantCount,
          action: 'cancelled_and_converted',
          conversions: evaluation.conversions.length,
        });

        console.log(
          `‚ùå Club Sauna ${clubSauna.id} cancelled (${evaluation.participantCount} participants < 3), ` +
            `converted ${evaluation.conversions.length} to individual reservations`
        );
      } else {
        results.clubSaunaEvaluation.evaluated.push({
          sharedReservationId: clubSauna.id,
          saunaName: clubSauna.sauna.name,
          islandName: clubSauna.sauna.island.name,
          clubName: clubSauna.sauna.island.club.name,
          participantCount: evaluation.participantCount,
          action: 'proceeding',
        });

        console.log(
          `‚úÖ Club Sauna ${clubSauna.id} proceeding (${evaluation.participantCount} participants >= 3)`
        );
      }
    }

    console.log(
      `‚úÖ Step 1 Complete: Evaluated ${clubSaunas.length} Club Sauna reservations`
    );

    // ========================================================================
    // STEP 2: Generate Tomorrow's Club Sauna Reservations
    // ========================================================================
    console.log("üìã Step 2: Generating tomorrow's Club Sauna reservations...");

    // Get tomorrow's date
    const tomorrow = addDays(startOfDay(new Date()), 1);

    // Check if tomorrow is eligible for Club Sauna
    const eligibility = isClubSaunaEligibleDate(tomorrow);
    results.clubSaunaGeneration.season = eligibility.season;

    if (eligibility.eligible) {
      // Get all saunas with auto Club Sauna enabled
      const eligibleSaunas = await prisma.sauna.findMany({
        where: {
          autoClubSaunaEnabled: true,
        },
        include: {
          island: {
            include: {
              club: true,
            },
          },
        },
      });

      for (const sauna of eligibleSaunas) {
        // Check if Club Sauna already exists for this date
        const existing = await prisma.sharedReservation.findFirst({
          where: {
            saunaId: sauna.id,
            date: startOfDay(tomorrow),
            isAutoGenerated: true,
            name: 'Club Sauna',
          },
        });

        if (existing) {
          console.log(
            `‚ÑπÔ∏è  Club Sauna already exists for sauna ${sauna.name} on ${tomorrow.toISOString()}`
          );
          continue;
        }

        // Generate Club Sauna data
        const clubSaunaData = generateClubSaunaData(sauna, tomorrow);

        if (!clubSaunaData) {
          continue;
        }

        // Create shared reservation
        const sharedReservation = await prisma.sharedReservation.create({
          data: {
            saunaId: clubSaunaData.saunaId,
            date: clubSaunaData.date,
            startTime: clubSaunaData.startTime,
            malesDurationHours: clubSaunaData.malesDurationHours,
            femalesDurationHours: clubSaunaData.femalesDurationHours,
            genderOrder: clubSaunaData.genderOrder,
            name: clubSaunaData.name,
            isAutoGenerated: true,
            createdBy: 'system',
          },
        });

        results.clubSaunaGeneration.generated.push({
          sharedReservationId: sharedReservation.id,
          saunaId: sauna.id,
          saunaName: sauna.name,
          islandName: sauna.island.name,
          clubName: sauna.island.club.name,
          date: tomorrow.toISOString(),
        });

        console.log(
          `‚úÖ Generated Club Sauna for ${sauna.name} on ${tomorrow.toISOString()}`
        );
      }

      console.log(
        `‚úÖ Step 2 Complete: Generated ${results.clubSaunaGeneration.generated.length} Club Sauna reservations`
      );
    } else {
      console.log(
        `‚ÑπÔ∏è  Step 2 Skipped: Tomorrow (${tomorrow.toISOString()}) is not eligible for Club Sauna`
      );
    }

    // ========================================================================
    // STEP 3: Check and Renew Club Secrets
    // ========================================================================
    console.log('üìã Step 3: Checking club secrets for renewal...');

    const renewalResults = await renewClubSecrets();
    results.secretRenewal.renewed = renewalResults.map((result) => ({
      clubId: result.clubId,
      clubName: result.clubName,
      newExpiry: result.newExpiry.toISOString(),
      wasExpired: result.wasExpired,
    }));

    if (renewalResults.length > 0) {
      console.log(
        `‚úÖ Step 3 Complete: Renewed ${renewalResults.length} club secret(s)`
      );
      renewalResults.forEach((result) => {
        console.log(
          `üîê Renewed secret for club "${result.clubName}" (expiry: ${result.newExpiry})`
        );
      });
    } else {
      console.log('‚úÖ Step 3 Complete: No club secrets need renewal');
    }

    // ========================================================================
    // Summary
    // ========================================================================
    console.log('');
    console.log(
      '================================================================================'
    );
    console.log('üìä DAILY CRON JOB SUMMARY');
    console.log(
      '================================================================================'
    );
    console.log(`Timestamp: ${results.timestamp}`);
    console.log('');
    console.log('Club Sauna Evaluation (Today):');
    console.log(
      `  - Evaluated: ${results.clubSaunaEvaluation.evaluated.length}`
    );
    console.log(
      `  - Cancelled: ${results.clubSaunaEvaluation.evaluated.filter((e) => e.action === 'cancelled_and_converted').length}`
    );
    console.log(
      `  - Proceeding: ${results.clubSaunaEvaluation.evaluated.filter((e) => e.action === 'proceeding').length}`
    );
    console.log('');
    console.log('Club Sauna Generation (Tomorrow):');
    console.log(
      `  - Season: ${results.clubSaunaGeneration.season || 'Not eligible'}`
    );
    console.log(
      `  - Generated: ${results.clubSaunaGeneration.generated.length}`
    );
    console.log('');
    console.log('Club Secret Renewal:');
    console.log(`  - Renewed: ${results.secretRenewal.renewed.length}`);
    console.log(
      '================================================================================'
    );
    console.log('');

    return successResponse({
      message: 'Daily cron job completed successfully',
      ...results,
    });
  } catch (error) {
    console.error('‚ùå Daily cron job failed:', error);
    return handleApiError(error);
  }
}

/**
 * GET /api/cron/daily
 * Health check endpoint
 */
export async function GET() {
  return successResponse({
    message: 'Daily cron job endpoint is active',
    schedule: 'Runs daily at 20:00 (8 PM) UTC',
    operations: [
      "1. Evaluate today's Club Sauna reservations (cancel if < 3 participants)",
      "2. Generate tomorrow's Club Sauna reservations",
      '3. Check and renew club secrets expiring within 30 days',
    ],
  });
}
