import Dexie, { Table } from 'dexie';
import type {
  LocalClub,
  LocalIsland,
  LocalSauna,
  LocalBoat,
  LocalReservation,
  LocalSharedReservation,
  LocalSharedParticipant,
  SyncChange,
} from '@/types';

/**
 * IndexedDB database for Island Device offline storage
 * 
 * This is the source of truth for the Island Device.
 * All reservation operations are performed against this local database first,
 * then synced to the backend when online.
 */
export class SaunaDB extends Dexie {
  // Tables
  clubs!: Table<LocalClub>;
  islands!: Table<LocalIsland>;
  saunas!: Table<LocalSauna>;
  boats!: Table<LocalBoat>;
  reservations!: Table<LocalReservation>;
  sharedReservations!: Table<LocalSharedReservation>;
  sharedParticipants!: Table<LocalSharedParticipant>;
  syncQueue!: Table<SyncChange>;
  
  // Metadata table for device configuration
  metadata!: Table<{ key: string; value: any }>;

  constructor() {
    super('SaunaReservations');
    
    this.version(1).stores({
      clubs: 'id, secret',
      islands: 'id, clubId',
      saunas: 'id, islandId, autoClubSaunaEnabled',
      boats: 'id, clubId, membershipNumber, name',
      reservations: 'id, saunaId, boatId, startTime, status, syncStatus',
      sharedReservations: 'id, saunaId, date, isAutoGenerated, syncStatus',
      sharedParticipants: 'id, sharedReservationId, boatId, syncStatus',
      syncQueue: '++id, timestamp, entityType, operation, syncStatus',
      metadata: 'key',
    });
  }
}

// Singleton instance
export const db = new SaunaDB();

/**
 * Initialize the database with device configuration
 */
export async function initializeDevice(config: {
  club: LocalClub;
  island: LocalIsland;
  saunas: LocalSauna[];
  boats: LocalBoat[];
  deviceId: string;
}): Promise<void> {
  await db.transaction('rw', [db.clubs, db.islands, db.saunas, db.boats, db.metadata], async () => {
    // Clear existing data
    await db.clubs.clear();
    await db.islands.clear();
    await db.saunas.clear();
    await db.boats.clear();
    
    // Add club
    await db.clubs.add(config.club);
    
    // Add island
    await db.islands.add(config.island);
    
    // Add saunas
    await db.saunas.bulkAdd(config.saunas);
    
    // Add boats
    await db.boats.bulkAdd(config.boats);
    
    // Store device metadata
    await db.metadata.put({ key: 'deviceId', value: config.deviceId });
    await db.metadata.put({ key: 'assignedIslandId', value: config.island.id });
    await db.metadata.put({ key: 'isConfigured', value: true });
    await db.metadata.put({ key: 'lastSyncAt', value: new Date().toISOString() });
  });
}

/**
 * Get device configuration status
 */
export async function getDeviceConfig(): Promise<{
  isConfigured: boolean;
  deviceId?: string;
  assignedIslandId?: string;
  lastSyncAt?: string;
}> {
  const isConfigured = await db.metadata.get('isConfigured');
  const deviceId = await db.metadata.get('deviceId');
  const assignedIslandId = await db.metadata.get('assignedIslandId');
  const lastSyncAt = await db.metadata.get('lastSyncAt');
  
  return {
    isConfigured: isConfigured?.value ?? false,
    deviceId: deviceId?.value,
    assignedIslandId: assignedIslandId?.value,
    lastSyncAt: lastSyncAt?.value,
  };
}

/**
 * Update last sync timestamp
 */
export async function updateLastSync(): Promise<void> {
  await db.metadata.put({ key: 'lastSyncAt', value: new Date().toISOString() });
}

/**
 * Check if device is configured
 */
export async function isDeviceConfigured(): Promise<boolean> {
  const config = await getDeviceConfig();
  return config.isConfigured;
}

/**
 * Get assigned island ID
 */
export async function getAssignedIslandId(): Promise<string | null> {
  const config = await getDeviceConfig();
  return config.assignedIslandId ?? null;
}

/**
 * Clear all device data (factory reset)
 */
export async function clearDeviceData(): Promise<void> {
  await db.transaction('rw', [
    db.clubs,
    db.islands,
    db.saunas,
    db.boats,
    db.reservations,
    db.sharedReservations,
    db.sharedParticipants,
    db.syncQueue,
    db.metadata,
  ], async () => {
    await db.clubs.clear();
    await db.islands.clear();
    await db.saunas.clear();
    await db.boats.clear();
    await db.reservations.clear();
    await db.sharedReservations.clear();
    await db.sharedParticipants.clear();
    await db.syncQueue.clear();
    await db.metadata.clear();
  });
}

/**
 * Export database for debugging
 */
export async function exportDatabase(): Promise<any> {
  return {
    clubs: await db.clubs.toArray(),
    islands: await db.islands.toArray(),
    saunas: await db.saunas.toArray(),
    boats: await db.boats.toArray(),
    reservations: await db.reservations.toArray(),
    sharedReservations: await db.sharedReservations.toArray(),
    sharedParticipants: await db.sharedParticipants.toArray(),
    syncQueue: await db.syncQueue.toArray(),
    metadata: await db.metadata.toArray(),
  };
}