// Sauna Reservation System Database Schema

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

// ============================================================================
// CORE ENTITIES
// ============================================================================

model Club {
  id        String   @id @default(uuid())
  name      String
  secret    String   @unique
  secretValidFrom    DateTime
  secretValidUntil   DateTime
  
  // Theming
  logoUrl          String?
  primaryColor     String?   // Hex color code
  secondaryColor   String?   // Hex color code
  
  // Configuration
  timezone         String    @default("Europe/Helsinki")
  
  // Timestamps
  createdAt        DateTime  @default(now())
  updatedAt        DateTime  @updatedAt
  
  // Relations
  islands          Island[]
  boats            Boat[]
  
  @@index([secret])
  @@map("clubs")
}

model Island {
  id              String   @id @default(uuid())
  clubId          String
  name            String
  numberOfSaunas  Int      @default(1)

  // Timestamps
  createdAt       DateTime @default(now())
  updatedAt       DateTime @updatedAt

  // Relations
  club            Club          @relation(fields: [clubId], references: [id], onDelete: Cascade)
  saunas          Sauna[]
  islandDevice    IslandDevice?

  @@index([clubId])
  @@map("islands")
}

model Sauna {
  id                    String   @id @default(uuid())
  islandId              String
  name                  String
  heatingTimeHours      Float    @default(2.0) // Decimal hours (e.g., 2.5h)

  // Club Sauna automation
  autoClubSaunaEnabled  Boolean  @default(false)
  
  // Timestamps
  createdAt             DateTime @default(now())
  updatedAt             DateTime @updatedAt
  
  // Relations
  island                Island              @relation(fields: [islandId], references: [id], onDelete: Cascade)
  reservations          Reservation[]
  sharedReservations    SharedReservation[]
  
  @@index([islandId])
  @@map("saunas")
}

model Boat {
  id               String   @id @default(uuid())
  clubId           String
  name             String
  membershipNumber String
  captainName      String?
  phoneNumber      String?
  
  // Timestamps
  createdAt        DateTime @default(now())
  updatedAt        DateTime @updatedAt
  
  // Relations
  club                        Club                          @relation(fields: [clubId], references: [id], onDelete: Cascade)
  reservations                Reservation[]
  sharedReservationParticipants SharedReservationParticipant[]
  
  @@unique([clubId, membershipNumber])
  @@index([clubId])
  @@index([membershipNumber])
  @@map("boats")
}

// ============================================================================
// RESERVATIONS
// ============================================================================

enum ReservationStatus {
  ACTIVE
  COMPLETED
  CANCELLED
}

model Reservation {
  id          String            @id @default(uuid())
  saunaId     String
  boatId      String
  
  // Time slots
  startTime   DateTime
  endTime     DateTime
  
  // Party size
  adults      Int
  kids        Int               @default(0)
  
  // Status
  status      ReservationStatus @default(ACTIVE)
  
  // Timestamps
  createdAt   DateTime          @default(now())
  updatedAt   DateTime          @updatedAt
  cancelledAt DateTime?
  
  // Relations
  sauna       Sauna             @relation(fields: [saunaId], references: [id], onDelete: Cascade)
  boat        Boat              @relation(fields: [boatId], references: [id], onDelete: Cascade)
  
  @@index([saunaId, startTime])
  @@index([boatId])
  @@index([startTime])
  @@map("reservations")
}

// ============================================================================
// SHARED RESERVATIONS
// ============================================================================

enum GenderOrder {
  MALES_FIRST
  FEMALES_FIRST
}

model SharedReservation {
  id                    String     @id @default(uuid())
  saunaId               String
  
  // Schedule
  date                  DateTime   @db.Date
  startTime             DateTime   @db.Time
  malesDurationHours    Int
  femalesDurationHours  Int
  genderOrder           GenderOrder
  
  // Metadata
  name                  String?
  description           String?
  
  // Club Sauna automation fields
  isAutoGenerated       Boolean    @default(false)
  autoCancelledAt       DateTime?
  convertedToIndividual Boolean    @default(false)
  
  // Created by
  createdBy             String?    // Admin user ID or "system"
  
  // Timestamps
  createdAt             DateTime   @default(now())
  updatedAt             DateTime   @updatedAt
  
  // Relations
  sauna                 Sauna                          @relation(fields: [saunaId], references: [id], onDelete: Cascade)
  participants          SharedReservationParticipant[]
  
  @@index([saunaId, date])
  @@index([date])
  @@index([isAutoGenerated])
  @@map("shared_reservations")
}

model SharedReservationParticipant {
  id                  String            @id @default(uuid())
  sharedReservationId String
  boatId              String
  
  // Party size
  adults              Int
  kids                Int               @default(0)
  
  // Timestamps
  joinedAt            DateTime          @default(now())
  
  // Relations
  sharedReservation   SharedReservation @relation(fields: [sharedReservationId], references: [id], onDelete: Cascade)
  boat                Boat              @relation(fields: [boatId], references: [id], onDelete: Cascade)
  
  @@unique([sharedReservationId, boatId])
  @@index([sharedReservationId])
  @@index([boatId])
  @@map("shared_reservation_participants")
}

// ============================================================================
// ISLAND DEVICE MANAGEMENT
// ============================================================================

model IslandDevice {
  id              String   @id @default(uuid())
  islandId        String   @unique

  // Device identification
  deviceToken     String   @unique
  deviceName      String?

  // Configuration
  isConfigured    Boolean  @default(false)
  lastSyncAt      DateTime?

  // Timestamps
  createdAt       DateTime @default(now())
  updatedAt       DateTime @updatedAt

  // Relations
  island          Island   @relation(fields: [islandId], references: [id], onDelete: Cascade)

  @@index([deviceToken])
  @@map("island_devices")
}

// ============================================================================
// SYNC TRACKING (for Island Device synchronization)
// ============================================================================

enum SyncStatus {
  PENDING
  SYNCED
  FAILED
  CONFLICT
}

model SyncLog {
  id              String     @id @default(uuid())
  islandId        String
  
  // Sync details
  entityType      String     // "reservation", "shared_reservation", etc.
  entityId        String
  operation       String     // "create", "update", "delete"
  
  // Data snapshot
  dataSnapshot    Json
  
  // Status
  status          SyncStatus @default(PENDING)
  errorMessage    String?
  
  // Timestamps
  createdAt       DateTime   @default(now())
  syncedAt        DateTime?
  
  @@index([islandId, status])
  @@index([createdAt])
  @@map("sync_logs")
}

// ============================================================================
// ADMIN USERS (Simple authentication for MVP)
// ============================================================================

model AdminUser {
  id              String   @id @default(uuid())
  username        String   @unique
  passwordHash    String
  
  // Metadata
  name            String?
  email           String?
  
  // Timestamps
  createdAt       DateTime @default(now())
  updatedAt       DateTime @updatedAt
  lastLoginAt     DateTime?
  
  @@map("admin_users")
}